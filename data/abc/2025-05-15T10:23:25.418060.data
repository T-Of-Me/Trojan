"environ({'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'APPDATA': 'C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming', 'CHROME_CRASHPAD_PIPE_NAME': '\\\\\\\\.\\\\pipe\\\\crashpad_10540_PHRAFQNYECEIRFIE', 'COMMONPROGRAMFILES': 'C:\\\\Program Files\\\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\\\Program Files (x86)\\\\Common Files', 'COMMONPROGRAMW6432': 'C:\\\\Program Files\\\\Common Files', 'COMPUTERNAME': 'ADMIN-PC', 'COMSPEC': 'C:\\\\Windows\\\\system32\\\\cmd.exe', 'DRIVERDATA': 'C:\\\\Windows\\\\System32\\\\Drivers\\\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'GOPATH': 'C:\\\\Users\\\\Admin\\\\go', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\\\Users\\\\Admin', 'LOCALAPPDATA': 'C:\\\\Users\\\\Admin\\\\AppData\\\\Local', 'LOGONSERVER': '\\\\\\\\ADMIN-PC', 'NUMBER_OF_PROCESSORS': '20', 'ONEDRIVE': 'C:\\\\Users\\\\Administrator\\\\OneDrive', 'ORIGINAL_XDG_CURRENT_DESKTOP': 'undefined', 'OS': 'Windows_NT', 'PATH': 'E:\\\\LAB\\\\attt\\\\bhptrojan-master\\\\venv\\\\Scripts;C:\\\\Users\\\\Admin\\\\Desktop\\\\attt\\\\cha4\\\\3;C:\\\\Program Files\\\\Common Files\\\\Oracle\\\\Java\\\\javapath;C:\\\\Program Files (x86)\\\\VMware\\\\VMware Workstation\\\\bin\\\\;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;C:\\\\Program Files\\\\NVIDIA Corporation\\\\NVIDIA app\\\\NvDLISR;C:\\\\Program Files (x86)\\\\NVIDIA Corporation\\\\PhysX\\\\Common;C:\\\\Users\\\\Admin\\\\;E:\\\\Application\\\\git\\\\Git\\\\cmd;C:\\\\Program Files\\\\Docker\\\\Docker\\\\resources\\\\bin;E:\\\\Application\\\\Anaconda\\\\Scripts;E:\\\\Application\\\\Anaconda\\\\Library\\\\bin;C:\\\\Program Files\\\\dotnet\\\\;E:\\\\GO\\\\bin;E:\\\\NodeJS\\\\;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\160\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\160\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\Client SDK\\\\ODBC\\\\170\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\160\\\\DTS\\\\Binn\\\\;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\160\\\\DTS\\\\Binn\\\\;C:\\\\Program Files\\\\OpenSSL-Win64\\\\bin;C:\\\\mingw-w64\\\\mingw64\\\\bin;C:\\\\Program Files\\\\Microsoft SQL Server\\\\150\\\\Tools\\\\Binn\\\\;C:\\\\Users\\\\Admin\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;C:\\\\visual-blue\\\\Microsoft VS Code\\\\bin;E:\\\\Application\\\\git\\\\Git\\\\cmd;C:\\\\Users\\\\Admin\\\\.dotnet\\\\tools;C:\\\\Users\\\\Admin\\\\go\\\\bin;C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\npm;C:\\\\Program Files\\\\OpenSSL-Win64\\\\bin;E:\\\\LAB\\\\winlibs-x86_64-posix-seh-gcc-12.1.0-mingw-w64msvcrt-10.0.0-r3\\\\mingw64\\\\bin;E:\\\\cursor\\\\cursor\\\\resources\\\\app\\\\bin;c:\\\\Users\\\\Admin\\\\.vscode\\\\extensions\\\\ms-python.debugpy-2025.8.0-win32-x64\\\\bundled\\\\scripts\\\\noConfigScripts;c:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\github.copilot-chat\\\\debugCommand', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 154 Stepping 3, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9a03', 'PROGRAMDATA': 'C:\\\\ProgramData', 'PROGRAMFILES': 'C:\\\\Program Files', 'PROGRAMFILES(X86)': 'C:\\\\Program Files (x86)', 'PROGRAMW6432': 'C:\\\\Program Files', 'PROMPT': '$P$G', 'PSMODULEPATH': 'C:\\\\Users\\\\Admin\\\\Documents\\\\WindowsPowerShell\\\\Modules;C:\\\\Program Files\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\160\\\\Tools\\\\PowerShell\\\\Modules\\\\', 'PUBLIC': 'C:\\\\Users\\\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\\\Windows', 'TEMP': 'C:\\\\Users\\\\Admin\\\\AppData\\\\Local\\\\Temp', 'TMP': 'C:\\\\Users\\\\Admin\\\\AppData\\\\Local\\\\Temp', 'USERDOMAIN': 'ADMIN-PC', 'USERDOMAIN_ROAMINGPROFILE': 'ADMIN-PC', 'USERNAME': 'Admin', 'USERPROFILE': 'C:\\\\Users\\\\Admin', 'VIRTUAL_ENV': 'E:\\\\LAB\\\\attt\\\\bhptrojan-master\\\\venv', 'VIRTUAL_ENV_PROMPT': 'venv', 'WINDIR': 'C:\\\\Windows', 'TERM_PROGRAM': 'vscode', 'TERM_PROGRAM_VERSION': '1.100.1', 'LANG': 'en_US.UTF-8', 'COLORTERM': 'truecolor', 'GIT_ASKPASS': 'c:\\\\visual-blue\\\\Microsoft VS Code\\\\resources\\\\app\\\\extensions\\\\git\\\\dist\\\\askpass.sh', 'VSCODE_GIT_ASKPASS_NODE': 'C:\\\\visual-blue\\\\Microsoft VS Code\\\\Code.exe', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'VSCODE_GIT_ASKPASS_MAIN': 'c:\\\\visual-blue\\\\Microsoft VS Code\\\\resources\\\\app\\\\extensions\\\\git\\\\dist\\\\askpass-main.js', 'VSCODE_GIT_IPC_HANDLE': '\\\\\\\\.\\\\pipe\\\\vscode-git-b1f08b178d-sock', 'PYDEVD_DISABLE_FILE_VALIDATION': '1', 'VSCODE_DEBUGPY_ADAPTER_ENDPOINTS': 'c:\\\\Users\\\\Admin\\\\.vscode\\\\extensions\\\\ms-python.debugpy-2025.8.0-win32-x64\\\\.noConfigDebugAdapterEndpoints\\\\endpoint-59e92a00645992ad.txt', 'BUNDLED_DEBUGPY_PATH': 'c:\\\\Users\\\\Admin\\\\.vscode\\\\extensions\\\\ms-python.debugpy-2025.8.0-win32-x64\\\\bundled\\\\libs\\\\debugpy', 'VSCODE_INJECTION': '1', '_OLD_VIRTUAL_PATH': 'C:\\\\Users\\\\Admin\\\\Desktop\\\\attt\\\\cha4\\\\3;C:\\\\Program Files\\\\Common Files\\\\Oracle\\\\Java\\\\javapath;C:\\\\Program Files (x86)\\\\VMware\\\\VMware Workstation\\\\bin\\\\;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;C:\\\\Program Files\\\\NVIDIA Corporation\\\\NVIDIA app\\\\NvDLISR;C:\\\\Program Files (x86)\\\\NVIDIA Corporation\\\\PhysX\\\\Common;C:\\\\Users\\\\Admin\\\\;E:\\\\Application\\\\git\\\\Git\\\\cmd;C:\\\\Program Files\\\\Docker\\\\Docker\\\\resources\\\\bin;E:\\\\Application\\\\Anaconda\\\\Scripts;E:\\\\Application\\\\Anaconda\\\\Library\\\\bin;C:\\\\Program Files\\\\dotnet\\\\;E:\\\\GO\\\\bin;E:\\\\NodeJS\\\\;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\160\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\160\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\Client SDK\\\\ODBC\\\\170\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\160\\\\DTS\\\\Binn\\\\;C:\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\160\\\\DTS\\\\Binn\\\\;C:\\\\Program Files\\\\OpenSSL-Win64\\\\bin;C:\\\\mingw-w64\\\\mingw64\\\\bin;C:\\\\Program Files\\\\Microsoft SQL Server\\\\150\\\\Tools\\\\Binn\\\\;C:\\\\Users\\\\Admin\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;C:\\\\visual-blue\\\\Microsoft VS Code\\\\bin;E:\\\\Application\\\\git\\\\Git\\\\cmd;C:\\\\Users\\\\Admin\\\\.dotnet\\\\tools;C:\\\\Users\\\\Admin\\\\go\\\\bin;C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\npm;C:\\\\Program Files\\\\OpenSSL-Win64\\\\bin;E:\\\\LAB\\\\winlibs-x86_64-posix-seh-gcc-12.1.0-mingw-w64msvcrt-10.0.0-r3\\\\mingw64\\\\bin;E:\\\\cursor\\\\cursor\\\\resources\\\\app\\\\bin;c:\\\\Users\\\\Admin\\\\.vscode\\\\extensions\\\\ms-python.debugpy-2025.8.0-win32-x64\\\\bundled\\\\scripts\\\\noConfigScripts;c:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\Code\\\\User\\\\globalStorage\\\\github.copilot-chat\\\\debugCommand', 'PYTHONUSERBASE': 'C:\\\\Users\\\\Admin\\\\AppData\\\\Local\\\\Packages\\\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\\\LocalCache\\\\local-packages'})"